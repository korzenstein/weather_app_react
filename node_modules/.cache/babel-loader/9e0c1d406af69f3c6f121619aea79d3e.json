{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkorzenstein/Desktop/REACT/WeatherAPP/src/components/WeatherContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherContext = /*#__PURE__*/React.createContext(); // useState \n\nexport function WeatherProivder(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [weatherData, setWeatherData] = useState([{}]);\n  const [cities, setCities] = useState(\"\"); // const API_KEY = \"X5w4c4WAqfMGcGd3MLnhwzpJArlcEKft\";\n  //     const getCity = async (cities) => {\n  //     const baseURL = 'http://dataservice.accuweather.com/locations/v1/cities/search'\n  //     const query = `?apikey=${API_KEY}&q={cities}`\n  //     const response = await fetch(baseURL + query);\n  //     const data = await response.json();\n  //     console.log(data);\n  // };\n  // getCity('Toronto');\n  // const API_KEY = \"61ff2ff2a45475c0d60c3ba5c2a56d10\";\n  // const fetchWeather = async (e) => {\n  //     e.preventDefault();\n  //     const response = \n  //     await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cities}&appid=${API_KEY}`);\n  //     console.log(response);\n  // };\n\n  React.useEffect(function () {\n    fetch(\"https://swapi.dev/api/people/1\").then(res => res.json()).then(data => setWeatherData(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    weatherData: weatherData,\n    setWeatherData: setWeatherData,\n    cities: cities,\n    setCities: setCities,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WeatherProivder, \"fkS6ilkLxEAaoemun1oKALAC+V4=\");\n\n_c = WeatherProivder;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherProivder\");","map":{"version":3,"sources":["/Users/stephenkorzenstein/Desktop/REACT/WeatherAPP/src/components/WeatherContext.js"],"names":["React","useContext","useState","WeatherContext","createContext","WeatherProivder","children","weatherData","setWeatherData","cities","setCities","useEffect","fetch","then","res","json","data","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;;AAEA,MAAMC,cAAc,gBAAGH,KAAK,CAACI,aAAN,EAAvB,C,CAEA;;AACA,OAAO,SAASC,eAAT,OAAqC;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAC5C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA9C;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC,CAF4C,CAK5C;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,EAAAA,KAAK,CAACW,SAAN,CAAgB,YAAW;AACvBC,IAAAA,KAAK,CAAC,gCAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAIR,cAAc,CAACQ,IAAD,CAFhC;AAGH,GAJD,EAIG,EAJH;AAMA,sBAEI,QAAC,cAAD,CAAgB,QAAhB;AACA,IAAA,WAAW,EAAET,WADb;AAEA,IAAA,cAAc,EAAEC,cAFhB;AAGA,IAAA,MAAM,EAAEC,MAHR;AAIA,IAAA,SAAS,EAAEC,SAJX;AAAA,cAMKO,KAAK,CAACX;AANX;AAAA;AAAA;AAAA;AAAA,UAFJ;AAWC;;GA3CeD,e;;KAAAA,e","sourcesContent":["import React, { useContext, useState } from \"react\";\n\nconst WeatherContext = React.createContext();\n\n// useState \nexport function WeatherProivder({children}) {\nconst [weatherData, setWeatherData] = useState([{}])\nconst [cities, setCities] = useState(\"\")\n\n\n// const API_KEY = \"X5w4c4WAqfMGcGd3MLnhwzpJArlcEKft\";\n    \n//     const getCity = async (cities) => {\n//     const baseURL = 'http://dataservice.accuweather.com/locations/v1/cities/search'\n//     const query = `?apikey=${API_KEY}&q={cities}`\n\n//     const response = await fetch(baseURL + query);\n//     const data = await response.json();\n//     console.log(data);\n// };\n// getCity('Toronto');\n\n\n// const API_KEY = \"61ff2ff2a45475c0d60c3ba5c2a56d10\";\n// const fetchWeather = async (e) => {\n//     e.preventDefault();\n//     const response = \n//     await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cities}&appid=${API_KEY}`);\n//     console.log(response);\n// };\n\nReact.useEffect(function() {\n    fetch(\"https://swapi.dev/api/people/1\")\n        .then(res => res.json())\n        .then(data => setWeatherData(data))\n}, [])\n\nreturn (\n\n    <WeatherContext.Provider\n    weatherData={weatherData}\n    setWeatherData={setWeatherData}\n    cities={cities}\n    setCities={setCities}    \n    >\n        {props.children}\n    </WeatherContext.Provider>\n)\n}"]},"metadata":{},"sourceType":"module"}