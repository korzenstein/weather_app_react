{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkorzenstein/repos/weather_app_react/src/components/Current.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { WeatherContext } from \"./WeatherContext\";\nimport Search from \"./Search\"; // cloud images imported below\n\nimport Clear from \"../weatherimages/Clear.png\";\nimport Hail from \"../weatherimages/Hail.png\";\nimport HeavyCloud from \"../weatherimages/HeavyCloud.png\";\nimport HeavyRain from \"../weatherimages/HeavyRain.png\";\nimport LightCloud from \"../weatherimages/LightCloud.png\";\nimport LightRain from \"../weatherimages/LightRain.png\";\nimport Shower from \"../weatherimages/Shower.png\";\nimport Sleet from \"../weatherimages/Sleet.png\";\nimport Snow from \"../weatherimages/Snow.png\";\nimport Thunderstorm from \"../weatherimages/Thunderstorm.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Current = () => {\n  _s();\n\n  var _weather$list, _weather$list$0$weath, _weather$list2, _weather$city;\n\n  const [city, setCity] = useContext(WeatherContext);\n  const [weather, updateWeather] = useContext(WeatherContext);\n  const [toggle, setToggle] = useContext(WeatherContext);\n  const month = `${new Date().toLocaleString(\"en-US\", {\n    month: \"long\"\n  })}`;\n  const date = `${new Date().toLocaleString(\"en-US\", {\n    day: \"2-digit\"\n  })}`;\n  const clouds = weather === null || weather === void 0 ? void 0 : (_weather$list = weather.list) === null || _weather$list === void 0 ? void 0 : (_weather$list$0$weath = _weather$list[0].weather) === null || _weather$list$0$weath === void 0 ? void 0 : _weather$list$0$weath[0].description;\n\n  const cloudImage = cloudType => {\n    const values = {\n      clear: Clear,\n      hail: Hail,\n      \"heavy clouds\": HeavyCloud,\n      \"heavy rain\": HeavyRain,\n      \"light rain\": LightRain,\n      showers: Shower,\n      sleet: Sleet,\n      snow: Snow,\n      thunderstorm: Thunderstorm\n    };\n    const cloudImage = cloudType.map(i => values[i] === cloudType);\n    return cloudImage;\n  };\n\n  const handleToggleBody = () => {\n    setToggle(!toggle);\n    console.log(toggle);\n  };\n\n  useEffect(() => {\n    console.log(\"useEffect used\");\n  }, [setToggle, updateWeather, weather, toggle, city, setCity]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"current\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: handleToggleBody,\n          children: \"Search Here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-img\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"cloud\",\n          src: LightCloud\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"current-temperature\",\n        children: [Math.round((weather === null || weather === void 0 ? void 0 : (_weather$list2 = weather.list) === null || _weather$list2 === void 0 ? void 0 : _weather$list2[0].main.temp) - 273), \"C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: clouds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-city-date\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Today \\u2022 \", date, \" \", month]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: weather === null || weather === void 0 ? void 0 : (_weather$city = weather.city) === null || _weather$city === void 0 ? void 0 : _weather$city.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Press\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Current, \"cs6iyiYOpH18l9NmoZbWZEd5noE=\");\n\n_c = Current;\nexport default Current;\n\nvar _c;\n\n$RefreshReg$(_c, \"Current\");","map":{"version":3,"sources":["/Users/stephenkorzenstein/repos/weather_app_react/src/components/Current.js"],"names":["React","useState","useContext","useEffect","useRef","WeatherContext","Search","Clear","Hail","HeavyCloud","HeavyRain","LightCloud","LightRain","Shower","Sleet","Snow","Thunderstorm","Current","city","setCity","weather","updateWeather","toggle","setToggle","month","Date","toLocaleString","date","day","clouds","list","description","cloudImage","cloudType","values","clear","hail","showers","sleet","snow","thunderstorm","map","i","handleToggleBody","console","log","Math","round","main","temp","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { WeatherContext } from \"./WeatherContext\";\n\nimport Search from \"./Search\";\n// cloud images imported below\nimport Clear from \"../weatherimages/Clear.png\";\nimport Hail from \"../weatherimages/Hail.png\";\nimport HeavyCloud from \"../weatherimages/HeavyCloud.png\";\nimport HeavyRain from \"../weatherimages/HeavyRain.png\";\nimport LightCloud from \"../weatherimages/LightCloud.png\";\nimport LightRain from \"../weatherimages/LightRain.png\";\nimport Shower from \"../weatherimages/Shower.png\";\nimport Sleet from \"../weatherimages/Sleet.png\";\nimport Snow from \"../weatherimages/Snow.png\";\nimport Thunderstorm from \"../weatherimages/Thunderstorm.png\";\n\nconst Current = () => {\n  const [city, setCity] = useContext(WeatherContext);\n  const [weather, updateWeather] = useContext(WeatherContext);\n  const [toggle, setToggle] = useContext(WeatherContext)\n\n  const month = `${new Date().toLocaleString(\"en-US\", { month: \"long\" })}`;\n  const date = `${new Date().toLocaleString(\"en-US\", { day: \"2-digit\" })}`;\n\n  const clouds = weather?.list?.[0].weather?.[0].description;\n\n\n  const cloudImage = (cloudType) => {\n    const values = {\n      clear: Clear,\n      hail: Hail,\n      \"heavy clouds\": HeavyCloud,\n      \"heavy rain\": HeavyRain,\n      \"light rain\": LightRain,\n      showers: Shower,\n      sleet: Sleet,\n      snow: Snow,\n      thunderstorm: Thunderstorm,\n    };\n    const cloudImage = cloudType.map((i) => values[i] === cloudType);\n    return cloudImage;\n  };\n\n  const handleToggleBody  = () => {\n    setToggle(!toggle);\n    console.log(toggle);\n  }\n  \n  useEffect(() => {\n    console.log(\"useEffect used\");\n    \n  }, [setToggle, updateWeather, weather, toggle, city, setCity]);\n\n  \n\n  return (\n    <section className=\"current\">\n      <Search />\n      <div className=\"current-container\">\n        <div className=\"current-nav\">\n          <button className=\"button\" onClick={handleToggleBody}>Search Here</button>\n          <button>0</button>\n        </div>\n        <div className=\"current-img\">\n          <img alt=\"cloud\" src={LightCloud} />\n        </div>\n        <h1 className=\"current-temperature\">\n          {Math.round(weather?.list?.[0].main.temp - 273)}C\n        </h1>\n        <h4>{clouds}</h4>\n        <div className=\"current-city-date\">\n          <p>\n            Today • {date} {month}\n          </p>\n          <h4>{weather?.city?.name}</h4>\n          <button>Press</button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Current;\n"]},"metadata":{},"sourceType":"module"}